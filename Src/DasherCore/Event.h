#ifndef __event_h__
#define __event_h__

// Classes representing different event types.

#include <string>
#include "DasherTypes.h"

namespace Dasher {
  class CEvent;
  class CParameterNotificationEvent;
  class CEditEvent;
  class CControlEvent;
  class CLockEvent;
  class CMessageEvent;
  class CScreenGeomEvent;
}

enum {
  EV_PARAM_NOTIFY = 1, EV_EDIT, EV_CONTROL, EV_LOCK, EV_MESSAGE, EV_SCREEN_GEOM
};

/// \ingroup Core
/// @{

/// \defgroup Events Events generated by Dasher modules.
/// @{
class Dasher::CEvent {
protected:
  CEvent(int iEventType) : m_iEventType(iEventType) {}
public:
  const int m_iEventType;
};

class Dasher::CParameterNotificationEvent:public Dasher::CEvent {
public:
  CParameterNotificationEvent(int iParameter) : CEvent(EV_PARAM_NOTIFY), m_iParameter(iParameter) {
  };

  const int m_iParameter;
};

class Dasher::CEditEvent:public Dasher::CEvent {
public:
  CEditEvent(int iEditType, const std::string & sText, int iOffset)
  : CEvent(EV_EDIT), m_iEditType(iEditType), m_sText(sText), m_iOffset(iOffset) {
  };

  const int m_iEditType;
  const std::string m_sText;
  const int m_iOffset;
};

class Dasher::CControlEvent:public Dasher::CEvent {
public:
  CControlEvent(int iID) : CEvent(EV_CONTROL), m_iID(iID) {
  };
  
  const int m_iID;
};

class Dasher::CLockEvent : public Dasher::CEvent {
public:
  CLockEvent(const std::string &strMessage, bool bLock, int iPercent) : CEvent(EV_LOCK) {
    m_strMessage = strMessage;
    m_bLock = bLock;
    m_iPercent = iPercent;
  };

  ///Unlike other events, fields are mutable: CLockEvents may be
  /// reused at the start, end, and during, the task requiring locking.
  std::string m_strMessage;
  bool m_bLock;
  int m_iPercent;
};

class Dasher::CMessageEvent : public Dasher::CEvent {
public:
  CMessageEvent(const std::string &strMessage, int iID, int iType)
  : CEvent(EV_MESSAGE), m_strMessage(strMessage), m_iID(iID), m_iType(iType) {
  };
  
  const std::string m_strMessage;
  const int m_iID;
  const int m_iType;
};

///Generated whenever the screen geometry changes: e.g. aspect ratio,
/// size, degree of nonlinearity, orientation, or generally whenever
/// values returned by Dasher2Screen/Screen2Dasher might have changed
/// (thus, any code caching such values should recompute/invalidate them)
class Dasher::CScreenGeomEvent : public Dasher::CEvent {
public:
  CScreenGeomEvent() : CEvent(EV_SCREEN_GEOM) {
  }
};
/// @}
/// @}

#endif

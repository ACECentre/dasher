AC_PREREQ(2.56)
AC_INIT([dasher],[3.99.0],[dasher@mrao.cam.ac.uk])
AC_REVISION([$Id: configure.in,v])
AM_INIT_AUTOMAKE([gnu check-news])
AM_MAINTAINER_MODE

AC_PROG_MAKE_SET
AC_PROG_INTLTOOL([0.18])

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AM_ICONV

GETTEXT_PACKAGE=dasher
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="ar az be bg bn bs ca cs cy da de el en_CA en_GB es et eu fa fi fr ga gl gu he hi hr hu id it ja ko lt mk mn ms nb ne nl no pa pl pt pt_BR ro ru rw sk sq sr sr@Latn sv ta tk tr ug uk zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

AC_PROG_CXX

WITHGTK2=true;

AC_CHECK_LIB(expat, XML_Parse,, AC_MSG_ERROR([Expat library not found.]))

AC_ARG_WITH([gnome],
	 AC_HELP_STRING([--with-gnome],[build with Gnome support (default is YES)]), 
	 if test $withval = "no"; then
	   WITHGNOME=false; 
	 else
	   WITHGNOME=true;
         fi, 
	 WITHGNOME=true)

AC_ARG_WITH([maemo],
	AC_HELP_STRING([--with-maemo],[build with Maemo support (default is NO)]),
	if test $withval = "yes"; then
	   WITHMAEMO=true;
	   WITHGNOME=false;
	else
	   WITHMAEMO=false;
        fi,
	WITHMAEMO=false)

AC_ARG_WITH([speech],
	 AC_HELP_STRING([--with-speech],[build with speech support (default is NO)]),
	 if test $withval = "no"; then
	   WITHSPEECH=false; 
	 else
	   WITHSPEECH=true;
         fi, 
	 WITHSPEECH=false)

AC_ARG_WITH([qte],
	 AC_HELP_STRING([--with-qte],[build with QTE support (default is NO - currently untested)]), 
	 if test $withval = "no"; then
	   WITHQTE=false; 
	 else
	   WITHQTE=true;
         fi, 
	 WITHQTE=false)

AC_ARG_WITH([gpe],
	 AC_HELP_STRING([--with-gpe],[build with GPE support (default is NO - currently untested)]), 
	 if test $withval = "no"; then
	   WITHGPE=false; 
	 else
	   WITHGPE=true;
         fi, 
	 WITHGPE=false)

AC_ARG_WITH([a11y],
	 AC_HELP_STRING([--with-a11y],[build with support for the GNOME accessibility library (default is YES)]),
	 if test $withval = "no"; then
	   WITHA11Y=false; 
	 else
	   WITHA11Y=true;
         fi, 
	 WITHA11Y=true)

AC_ARG_WITH([japanese],
	 AC_HELP_STRING([--with-japanese],[build with support for Japanese Kanji entry (experimental - default is NO)]),
	 if test $withval = "no"; then
	   WITHJAPANESE=false; 
	 else
	   AC_CHECK_LIB(canna, RkBgnBun,, AC_MSG_ERROR([Canna library not found.]))
	   WITHJAPANESE=true;
         fi, 
	 WITHJAPANESE=false)


if [[ x"$WITHGTK2" = xtrue ]]
then 
	PKG_CHECK_MODULES(GTK2, gtk+-2.0 >= 2.6.0,[GTK2HERE=true],[GTK2HERE=false]) 
	PKG_CHECK_MODULES(GCONF, gconf-2.0,[GCONF2HERE=true],[GCONF2HERE=false])
fi

if [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHGTK2" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
elif [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
else 
	BUILDGTK2=false
fi

if [[ x$BUILDGTK2 = xfalse ]] && [[ x"$WITHQTE" != xtrue ]]
then
	echo $WITHGTK2
	AC_ERROR("Unable to find GTK2 or another necessary library. See the previous line for more useful data.")
fi

if [[ x"$WITHQTE" != xtrue ]]
then
dnl test for X libraries
	if test	x$no_x = xyes ; then
	  AC_MSG_ERROR([X development libraries not found])
	else
	  X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
	fi

dnl path to Xtst
	AC_CHECK_LIB(Xtst, XTestFakeKeyEvent, XTST_LIBS=-lXtst)
	if test "x$XTST_LIBS" = x; then
	  save_LIBS="$LIBS"
	  for xtstpath in /usr/X11R6/lib64 /usr/X11R6/lib /usr/openwin/lib $x_libraries; do
	    LIBS="-L$xtstpath -lXtst"
	    case "$host" in
	    *solaris*) XTST_RPATH_FLAGS="-R$xtstpath" ;;
	    esac
	    AC_MSG_CHECKING(for -lXtst in $xtstpath)
	    AC_TRY_LINK([], [XTestFakeKeyEvent()], [
	        AC_MSG_RESULT(yes)
	        XTST_LIBS="$XTST_RPATH_FLAGS -L$xtstpath -lXtst"
	        LIBS="$save_LIBS"
	        break],[AC_MSG_RESULT(no)])
	  done
	  if test "x$XTST_LIBS" = x; then
	    AC_MSG_ERROR(Couldn't find the Xtst library. Check config.log for details)
	  else
	    X_LIBS="$X_LIBS $XTST_LIBS"
	    AC_DEFINE(HAVE_XTST, 1, [The XTest extension is present])
	  fi
	fi

AC_SUBST(X_LIBS)
fi


if [[ x"$WITHGNOME" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome, libgnome-2.0 gnome-vfs-2.0 libgnomeui-2.0)
	AC_DEFINE([GNOME_LIBS])
fi

if [[ x"$WITHSPEECH" = xtrue ]]; then
        echo "foobar: $WITHSPEECH"
	PKG_CHECK_MODULES(gnome_speech, gnome-speech-1.0 bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0)
	AC_DEFINE([GNOME_SPEECH])
	SPEECH_SOURCES='speech.$(OBJEXT)'
fi

if [[ x"$WITHA11Y" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_a11y, bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0 libgnomeui-2.0 cspi-1.0)
	AC_DEFINE([GNOME_A11Y])
fi

if [[ x"$WITHJAPANESE" = xtrue ]]; then
	AC_DEFINE([JAPANESE])
fi

if [[ x"$WITHGPE" = xtrue ]]; then
	AC_DEFINE([WITH_GPE])
fi

if [[ x"$BUILDGTK2" = xtrue ]]; then 
	PKG_CHECK_MODULES(glade, libglade-2.0)
	PKG_CHECK_MODULES(gthread, gthread-2.0)
	PKG_CHECK_MODULES(wnck, libwnck-1.0)
fi

AC_SUBST(gnome_speech_LIBS)
AC_SUBST(gnome_speech_CFLAGS)
AC_SUBST([SPEECH_SOURCES])

AC_SUBST(gnome_a11y_LIBS)
AC_SUBST(gnome_a11y_CFLAGS)
AC_SUBST([A11Y_SOURCES])

AC_SUBST(gnome_LIBS)
AC_SUBST(gnome_CFLAGS)

AC_SUBST(glade_LIBS)
AC_SUBST(glade_CFLAGS)

AC_SUBST(gthread_LIBS)
AC_SUBST(gthread_CFLAGS)

AC_SUBST(wnck_LIBS)
AC_SUBST(wnck_CFLAGS)

AC_SUBST(GETTEXT_PACKAGE)

AM_CONDITIONAL(DOGTK2, test x$BUILDGTK2 = xtrue)	
AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)
AM_CONDITIONAL(WITH_GPE, test x$WITHGPE = xtrue)
AM_CONDITIONAL(JAPANESE, test x$WITHJAPANESE = xtrue)

AC_SUBST(GTK2_CFLAGS)
AC_SUBST(GTK2_LIBS)

AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)

if [[ x"$WITHGPE" = xtrue ]]; then
	SETTINGS_LIBS="-lgpewidget -lXsettings-client -lXsettings"
else
	SETTINGS_CFLAGS=$GCONF_CFLAGS
	SETTINGS_LIBS=$GCONF_LIBS
fi
AC_SUBST(SETTINGS_CFLAGS)
AC_SUBST(SETTINGS_LIBS)


AC_CONFIG_FILES([Makefile
		 Src/Makefile
		 Src/Common/Makefile
		 Src/DasherCore/Makefile
		 Src/DasherCore/Alphabet/Makefile
		 Src/DasherCore/LanguageModelling/Makefile
		 Src/Gtk2/Makefile
		 Src/Gtk2-Experimental/Makefile
		 Src/Qt/Makefile
		 Src/Win32/Makefile
		 Data/Makefile
		 Data/Translations/Makefile
		 Data/system.rc/Makefile
		 Data/Help/Makefile
		 Data/Help/Gnome/Makefile
		 Data/Help/Gnome/C/Makefile
		 Data/Help/Gnome/eu/Makefile
		 Doc/Makefile
		 po/Makefile.in])
AC_OUTPUT

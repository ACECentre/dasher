AC_PREREQ(2.50)
AC_INIT([dasher],[3.2.9],[dasher@mrao.cam.ac.uk])
AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE

AC_PROG_MAKE_SET
AC_PROG_INTLTOOL([0.18])

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

AM_ICONV

GETTEXT_PACKAGE=dasher
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="ar az be bn ca cs cy da de el en_CA en_GB es et fi fr ga hr hu it ja ko lt mn ms nl no pa pl pt pt_BR ro ru sk sq sr sr@Latn sv tr uk zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

AC_PROG_CXX

AC_CHECK_LIB(expat, XML_Parse,, AC_MSG_ERROR([Expat library not found.]))

AC_ARG_WITH([gnome],
	 AC_HELP_STRING([--with-gnome],[build with Gnome support (default is NO)]), 
	[WITHGNOME=true],[WITHGNOME=false])
AC_ARG_WITH([qte],
	 AC_HELP_STRING([--with-qte],[build with QTE support (default is NO)]), 
	[WITHQTE=true],[WITHQTE=false])

AC_ARG_WITH([speech],
	 AC_HELP_STRING([--with-speech],[build with speech support (default is NO)]), [WITHSPEECH=true],[WITHSPEECH=false])

AC_ARG_WITH([gpe],
	 AC_HELP_STRING([--with-gpe],[build with gpe support (default is NO)]), [WITHGPE=true],[WITHGPE=false])

AC_ARG_WITH([a11y],
	 AC_HELP_STRING([--with-a11y],[build with support for the GNOME accessibility library(default is NO)]), [WITHA11Y=true],[WITHA11Y=false])

PKG_CHECK_MODULES(GTK2, gtk+-2.0,[GTK2HERE=true],[GTK2HERE=false]) 

PKG_CHECK_MODULES(GCONF, gconf-2.0,[GCONF2HERE=true],[GCONF2HERE=false])

if [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHGTK2" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
elif [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
else 
	BUILDGTK2=false
fi

if [[ x$BUILDGTK2 = xfalse ]] && [[ x"$WITHQTE" != xtrue ]]
then
	AC_ERROR("Unable to find GTK2 or another necessary library. See the previous line for more useful data.")
fi

if [[ x"$WITHQTE" != xtrue ]]
then
dnl test for X libraries
	if test	x$no_x = xyes ; then
	  AC_MSG_ERROR([X development libraries not found])
	else
	  X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
	fi

dnl path to Xtst
	AC_CHECK_LIB(Xtst, XTestFakeKeyEvent, XTST_LIBS=-lXtst)
	if test "x$XTST_LIBS" = x; then
	  save_LIBS="$LIBS"
	  for xtstpath in /usr/X11R6/lib /usr/openwin/lib $x_libraries; do
	    LIBS="-L$xtstpath -lXtst"
	    case "$host" in
	    *solaris*) XTST_RPATH_FLAGS="-R$xtstpath" ;;
	    esac
	    AC_MSG_CHECKING(for -lXtst in $xtstpath)
	    AC_TRY_LINK([], [XTestFakeKeyEvent()], [
	        AC_MSG_RESULT(yes)
	        XTST_LIBS="$XTST_RPATH_FLAGS -L$xtstpath -lXtst"
	        LIBS="$save_LIBS"
	        break],[AC_MSG_RESULT(no)])
	  done
	  if test "x$XTST_LIBS" = x; then
	    AC_MSG_ERROR(Couldn't find the Xtst library. Check config.log for details)
	  else
	    X_LIBS="$X_LIBS $XTST_LIBS"
	    AC_DEFINE(HAVE_XTST, 1, [The XTest extension is present])
	  fi
	fi

AC_SUBST(X_LIBS)
fi



if [[ x"$WITHGNOME" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome, libgnome-2.0 gnome-vfs-2.0 libgnomeui-2.0)
	AC_DEFINE([GNOME_LIBS])
fi

if [[ x"$WITHSPEECH" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_speech, gnome-speech-1.0 bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0)
	AC_DEFINE([GNOME_SPEECH])
	SPEECH_SOURCES='speech.$(OBJEXT)'
fi

if [[ x"$WITHA11Y" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_a11y, bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0 libgnomeui-2.0 cspi-1.0)
	AC_DEFINE([GNOME_A11Y])
fi

if [[ x"$WITHGPE" = xtrue ]]; then
	AC_DEFINE([WITH_GPE])
fi

PKG_CHECK_MODULES(glade, libglade-2.0)
PKG_CHECK_MODULES(gthread, gthread-2.0)

AC_SUBST(gnome_speech_LIBS)
AC_SUBST(gnome_speech_CFLAGS)
AC_SUBST([SPEECH_SOURCES])

AC_SUBST(gnome_a11y_LIBS)
AC_SUBST(gnome_a11y_CFLAGS)
AC_SUBST([A11Y_SOURCES])

AC_SUBST(gnome_LIBS)
AC_SUBST(gnome_CFLAGS)

AC_SUBST(glade_LIBS)
AC_SUBST(glade_CFLAGS)

AC_SUBST(gthread_LIBS)
AC_SUBST(gthread_CFLAGS)

AC_SUBST(GETTEXT_PACKAGE)

AM_CONDITIONAL(DOGTK2, test x$BUILDGTK2 = xtrue)	
AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)
AM_CONDITIONAL(WITH_GPE, test x$WITHGPE = xtrue)

AC_SUBST(GTK2_CFLAGS)
AC_SUBST(GTK2_LIBS)
AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)

AC_OUTPUT([Makefile Src/Common/Makefile Src/Qt/Makefile Src/Gtk2/Makefile Src/DasherCore/Makefile Src/Makefile Data/Makefile Data/Translations/Makefile Data/system.rc/Makefile Data/Help/Makefile Data/Help/Gnome/Makefile Data/Help/Gnome/C/Makefile Doc/Makefile po/Makefile.in ],[])

if grep "^sys_lib_search_path_spec.*" libtool >/dev/null ; then
AC_MSG_RESULT(patching libtool to fix HIDEOUS BREAKAGE)
    test -f libtool.old || (mv libtool libtool.old && cp libtool.old libtool)
    sed -e s/^hardcode_direct.*$/hardcode_direct=yes/g libtool | \
    sed -e s/^hardcode_minus_L.*$/hardcode_minus_L=yes/g | \
    sed -e s/^hardcode_shlibpath_var.*$/hardcode_shlibpath_var=no/g >libtool.new
    mv libtool.new libtool
fi




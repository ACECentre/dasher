AC_PREREQ(2.50)
AC_INIT(Src/Main.cc)
AM_INIT_AUTOMAKE(dasher, 3.0.2)

AC_PROG_RANLIB 
AC_PROG_MAKE_SET
AC_PROG_INTLTOOL([0.18])

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

ALL_LINGUAS="fr"
AM_GNU_GETTEXT
#AM_ICONV

AC_PROG_CXX

AC_CHECK_LIB(expat, XML_Parse,, AC_MSG_ERROR([Expat library not found.]))

AC_ARG_WITH([gtk2],
	 AC_HELP_STRING([--with-gtk2],[build with GTK2 support (default is NO)]), 
	[WITHGTK2=true],[WITHGTK2=false])
AC_ARG_WITH([qte],
	 AC_HELP_STRING([--with-qte],[build with QTE support (default is NO)]), 
	[WITHQTE=true],[WITHQTE=false])
AC_ARG_WITH([qteplugin],
	 AC_HELP_STRING([--with-qteplugin],[build with QTE input plugin support (default is NO)]), 
	[WITHQTEPLUGIN=true],[WITHQTEPLUGIN=false])

AC_ARG_WITH([speech],
	 AC_HELP_STRING([--with-speech],[build with speech support (default is NO)]), [WITHSPEECH=true],[WITHSPEECH=false])

AC_ARG_WITH([a11y],
	 AC_HELP_STRING([--with-a11y],[build with support for the GNOME accessibility library(default is NO)]), [WITHA11Y=true],[WITHA11Y=false])

PKG_CHECK_MODULES(GTK2, gtk+-2.0,[GTK2HERE=true],[GTK2HERE=false]) 

PKG_CHECK_MODULES(GCONF, gconf-2.0,[GCONF2HERE=true],[GCONF2HERE=false])

if [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHGTK2" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]] && [[ x"$WITHQTEPLUGIN" != xtrue ]]
then
	BUILDGTK2=true
elif [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]] && [[ x"$WITHQTEPLUGIN" != xtrue ]]
then
	BUILDGTK2=true
else 
	BUILDGTK2=false
fi

if [[ x$BUILDGTK2 = xfalse ]] && [[ x"$WITHQTE" != xtrue ]] && [[ x"$WITHQTEPLUGIN" != xtrue ]]
then
	AC_ERROR("Unable to find GTK2!")
fi

if [[ x"$WITHSPEECH" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_speech, gnome-speech-1.0 bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0)
	AC_DEFINE([GNOME_SPEECH])
	SPEECH_SOURCES='speech.$(OBJEXT)'
fi

if [[ x"$WITHA11Y" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_a11y, bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0 libgnomeui-2.0 cspi-1.0)
	AC_DEFINE([GNOME_A11Y])
	A11Y_SOURCES='accessibility.$(OBJEXT)'
fi

PKG_CHECK_MODULES(glade, libglade-2.0)

AC_SUBST(gnome_speech_LIBS)
AC_SUBST(gnome_speech_CFLAGS)
AC_SUBST([SPEECH_SOURCES])

AC_SUBST(gnome_a11y_LIBS)
AC_SUBST(gnome_a11y_CFLAGS)
AC_SUBST([A11Y_SOURCES])

AC_SUBST(glade_LIBS)
AC_SUBST(glade_CFLAGS)

AM_CONDITIONAL(DOGTK2, test x$BUILDGTK2 = xtrue)	
AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
AM_CONDITIONAL(DOQTEPLUGIN, test x$WITHQTEPLUGIN = xtrue)
AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)

AC_SUBST(GTK2_CFLAGS)
AC_SUBST(GTK2_LIBS)
AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)

AC_OUTPUT([Makefile Src/Common/Makefile Src/Qt/Makefile Src/Gtk2/Makefile Src/DasherCore/Makefile Src/Makefile Data/Makefile Data/Translations/Makefile Data/system.rc/Makefile Doc/Makefile intl/Makefile po/Makefile.in],[sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in > po/Makefile])

if grep "^sys_lib_search_path_spec.*" libtool >/dev/null ; then
AC_MSG_RESULT(patching libtool to fix HIDEOUS BREAKAGE)
    test -f libtool.old || (mv libtool libtool.old && cp libtool.old libtool)
    sed -e s/^hardcode_direct.*$/hardcode_direct=yes/g libtool | \
    sed -e s/^hardcode_minus_L.*$/hardcode_minus_L=yes/g | \
    sed -e s/^hardcode_shlibpath_var.*$/hardcode_shlibpath_var=no/g >libtool.new
    mv libtool.new libtool
fi




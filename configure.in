AC_PREREQ(2.56)
AC_INIT([dasher],[3.2.16pre],[dasher@mrao.cam.ac.uk])
AC_REVISION([$Id: configure.in,v])
AC_CONFIG_SRCDIR([Src/main.cc])
AC_CONFIG_HEADERS(config.h)
AM_INIT_AUTOMAKE([gnu check-news])
AM_MAINTAINER_MODE

AC_PROG_MAKE_SET
AC_PROG_INTLTOOL([0.18])

AC_DISABLE_STATIC
AC_PROG_LIBTOOL
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CXXFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CXXFLAGS -Wall" ;;
  esac
  case " $CXXFLAGS " in
  *[\ \	]-O*[\ \	]*) ;;
  *) CFLAGS="$CXXFLAGS -O2" ;;
  esac
fi
changequote([,])dnl

AM_ICONV

GETTEXT_PACKAGE=dasher
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="ar az be bg bn bs ca cs cy da de el en_CA en_GB es et eu fi fr ga gl gu he hi hr hu id it ja ko lt mk mn ms nb ne nl no pa pl pt pt_BR ro ru rw sk sq sr sr@Latn sv ta tk tr ug uk zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

AC_PROG_CXX
AC_CHECK_LIB(expat, XML_Parse,, AC_MSG_ERROR([Expat library not found.]))

WITHGNOME=true
WITHSPEECH=true
WITHQTE=false
WITHGPE=false
WITHA11Y=true
WITHGTK2=true
WITHCAIRO=true

AC_ARG_WITH([gnome],
	 AC_HELP_STRING([--with-gnome],[build with Gnome support (default is YES)]), 
	[WITHGNOME=true],[WITHGNOME=false])

AC_ARG_WITH([speech],
	AC_HELP_STRING([--with-speech],[build with speech support (default is YES)]),
	[WITHSPEECH=true],[WITHSPEECH=false])

AC_ARG_WITH([qte],
	AC_HELP_STRING([--with-qte],[build with QTE support (default is NO)]), 
	[WITHQTE=true],[WITHQTE=false])

AC_ARG_WITH([gpe],
	AC_HELP_STRING([--with-gpe],[build with gpe support (default is NO)]),
	[WITHGPE=true],[WITHGPE=false])

AC_ARG_WITH([a11y],
	AC_HELP_STRING([--with-a11y],[build with support for the GNOME accessibility library (default is YES)]),
	[WITHA11Y=true], [WITHA11Y=false])

AC_ARG_WITH([cairo],
	AC_HELP_STRING([--with-cairo],[build with cairo support (default is YES)]),
	[WITHCAIRO=true], [WITHCAIRO=false])

if [[ x"$WITHGTK2" = xtrue ]]
then 
	PKG_CHECK_MODULES(GTK2, gtk+-2.0,[GTK2HERE=true],[GTK2HERE=false]) 
	PKG_CHECK_MODULES(GCONF, gconf-2.0,[GCONF2HERE=true],[GCONF2HERE=false])
fi

if [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHGTK2" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
elif [[ x"$GTK2HERE" = xtrue ]] && [[ x"$GCONF2HERE" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
else 
	BUILDGTK2=false
fi

if [[ x$BUILDGTK2 = xfalse ]] && [[ x"$WITHQTE" != xtrue ]]
then
	echo $WITHGTK2
	AC_ERROR("Unable to find GTK2 or another necessary library. See the previous line for more useful data.")
fi




AC_PATH_XTRA
if [[ x"$WITHQTE" != xtrue ]]
then
dnl test for X libraries
	if test	x$no_x = xyes ; then
	  AC_MSG_ERROR([X development libraries not found])
	else
	  X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
	fi

dnl path to Xtst
	AC_CHECK_LIB(Xtst, XTestFakeKeyEvent, XTST_LIBS=-lXtst)
	if test "x$XTST_LIBS" = x; then
	  save_LIBS="$LIBS"
	  for xtstpath in /usr/X11R6/lib64 /usr/X11R6/lib /usr/openwin/lib $x_libraries; do
	    LIBS="-L$xtstpath -lXtst"
	    case "$host" in
	    *solaris*) XTST_RPATH_FLAGS="-R$xtstpath" ;;
	    esac
	    AC_MSG_CHECKING(for -lXtst in $xtstpath)
	    AC_TRY_LINK([], [XTestFakeKeyEvent()], [
	        AC_MSG_RESULT(yes)
	        XTST_LIBS="$XTST_RPATH_FLAGS -L$xtstpath -lXtst"
	        LIBS="$save_LIBS"
	        break],[AC_MSG_RESULT(no)])
	  done
	  if test "x$XTST_LIBS" = x; then
	    AC_MSG_ERROR(Couldn't find the Xtst library. Check config.log for details)
	  else
	    X_LIBS="$X_LIBS $XTST_LIBS"
	    AC_DEFINE(HAVE_XTST, 1, [The XTest extension is present])
	  fi
	fi
fi


if [[ x"$WITHGNOME" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome, libgnome-2.0 libgnomeui-2.0 gnome-vfs-2.0)
	AC_DEFINE([GNOME_LIBS], 1, [libgnome-2, libgnomeui-2, and gnome-vfs-2 are present])
fi

if [[ x"$WITHSPEECH" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_speech, gnome-speech-1.0 bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0)
	AC_DEFINE([GNOME_SPEECH], 1, [gnome_speech-1 libraries are present])
	SPEECH_SOURCES='speech.$(OBJEXT)'
fi

if [[ x"$WITHA11Y" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_a11y, bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0 libgnomeui-2.0 cspi-1.0)
	AC_DEFINE([GNOME_A11Y], 1, [gnome_a11y libraries are present])
fi

if [[ x"$WITHGPE" = xtrue ]]; then
	AC_DEFINE([WITH_GPE], 1, [gpe is present])
fi

if [[ x"$WITHCAIRO" = xtrue ]]; then
	PKG_CHECK_MODULES(cairo, gtk+-2.0 >= 2.7.0)
	AC_DEFINE([WITH_CAIRO], 1, [use cairo (needs Gtk+ >= 2.7.0)])
fi

if [[ x"$BUILDGTK2" = xtrue ]]; then 
	PKG_CHECK_MODULES(glade, libglade-2.0)
	PKG_CHECK_MODULES(gthread, gthread-2.0)
	PKG_CHECK_MODULES(wnck, libwnck-1.0)
	PKG_CHECK_MODULES(GTK2, gtk+-2.0,[GTK2HERE=true],[GTK2HERE=false]) 
fi

AC_SUBST([SPEECH_SOURCES])
AC_SUBST([A11Y_SOURCES])

AM_CONDITIONAL(DOGTK2, test x$BUILDGTK2 = xtrue)	
AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)
AM_CONDITIONAL(WITH_GPE, test x$WITHGPE = xtrue)

if [[ x"$WITHGPE" = xtrue ]]; then
	SETTINGS_CFLAGS=
	SETTINGS_LIBS="-lgpewidget -lXsettings-client -lXsettings"
else
	SETTINGS_CFLAGS=$GCONF_CFLAGS
	SETTINGS_LIBS=$GCONF_LIBS
fi

GTK2BUILD_CFLAGS="$GTK2_CFLAGS $SETTINGS_CFLAGS $gthread_CFLAGS $gnome_speech_CFLAGS $gnome_a11y_CFLAGS $glade_CFLAGS $gnome_CFLAGS $wnck_CFLAGS -DWNCK_I_KNOW_THIS_IS_UNSTABLE"
GTK2BUILD_LIBS="$X_LIBS $GTK2_LIBS $SETTINGS_LIBS $gthread_LIBS $gnome_speech_LIBS $gnome_a11y_LIBS $glade_LIBS $gnome_LIBS $wnck_LIBS"

AC_SUBST(GTK2BUILD_CFLAGS)
AC_SUBST(GTK2BUILD_LIBS)

AC_CONFIG_FILES([Makefile
		 Src/Makefile
		 Src/Common/Makefile
		 Src/DasherCore/Makefile
		 Src/DasherCore/Alphabet/Makefile
		 Src/DasherCore/LanguageModelling/Makefile
		 Src/Gtk2/Makefile
		 Src/Qt/Makefile
		 Data/Makefile
		 Data/Translations/Makefile
		 Data/system.rc/Makefile
		 Data/Help/Makefile
		 Data/Help/Gnome/Makefile
		 Data/Help/Gnome/C/Makefile
		 Data/Help/Gnome/eu/Makefile
		 Doc/Makefile
		 po/Makefile.in])
AC_OUTPUT

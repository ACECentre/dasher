AC_PREREQ(2.56)
AC_INIT([dasher],[4.5.2],[http://bugzilla.gnome.org/enter_bug.cgi?product=dasher])
AC_REVISION([$Id: configure.in,v])
AC_CONFIG_SRCDIR([Src/main.cc])
AC_CONFIG_HEADERS(config.h)

dnl The following two changes are required currently for the Maemo build (but will break the GNOME build)

dnl AM_INIT_AUTOMAKE([1.9 gnu check-news dist-bzip2 no-dist-gzip])
AM_INIT_AUTOMAKE([1.8 gnu check-news dist-bzip2 no-dist-gzip])
AM_MAINTAINER_MODE

AC_PROG_MAKE_SET
IT_PROG_INTLTOOL([0.34.90])
dnl AC_PROG_INTLTOOL(0.30)

AC_DISABLE_STATIC
AC_PROG_LIBTOOL
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -Wall -Wno-non-virtual-dtor"
  case " $CXXFLAGS " in
  *[\ \	]-O*) ;;
  *) CXXFLAGS="$CXXFLAGS -O2" ;;
  esac
fi
changequote([,])dnl

dnl AM_ICONV

GETTEXT_PACKAGE=dasher
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

AC_PROG_CXX

AC_PROG_LD_GNU

WITHGTK2=true;

PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.4, have_glib=true, have_glib=false)

AC_CHECK_LIB(expat, XML_Parse,, AC_MSG_ERROR([Expat library not found.]))

AC_ARG_ENABLE(debug,
	AC_HELP_STRING([--enable-debug],[build with additional debugging checks (default is NO)]),
	 if test $withval = "no"; then
	   DEBUG=false;
	 else
	   DEBUG=true;
         fi,
         DEBUG=false)

AC_ARG_WITH([gnome],
	 AC_HELP_STRING([--with-gnome],[build with GNOME support (default is YES)]), 
	 if test $withval = "no"; then
	   WITHGNOME=false; 
	 else
	   WITHGNOME=true;
         fi, 
	 WITHGNOME=true)

AC_ARG_ENABLE([speech],
	 AC_HELP_STRING([--enable-speech],[build with speech support (default is NO)]),
	 if test $enableval = "no"; then
	   WITHSPEECH=false; 
	 else
	   WITHSPEECH=true;
         fi, 
	 WITHSPEECH=false)

AC_ARG_WITH([qte],
	 AC_HELP_STRING([--with-qte],[build with QTE support (default is NO -- currently untested)]), 
	 if test $withval = "no"; then
	   WITHQTE=false; 
	 else
	   WITHQTE=true;
         fi, 
	 WITHQTE=false)

AC_ARG_WITH([gpe],
	 AC_HELP_STRING([--with-gpe],[build with GPE support (default is NO -- currently untested)]), 
	 if test $withval = "no"; then
	   WITHGPE=false; 
	 else
	   WITHGPE=true;
         fi, 
	 WITHGPE=false)

AC_ARG_ENABLE([a11y],
	 AC_HELP_STRING([--enable-a11y],[build with support for the GNOME accessibility framework (default is YES)]),
	 if test $enableval = "no"; then
	   WITHA11Y=false; 
	 else
	   WITHA11Y=true;
         fi, 
	 WITHA11Y=true)

AC_ARG_ENABLE([japanese],
	 AC_HELP_STRING([--enable-japanese],[build with support for Japanese Kanji entry (experimental -- default is NO)]),
	 if test $enableval = "no"; then
	   WITHJAPANESE=false; 
	 else
	   AC_CHECK_LIB(canna, RkBgnBun,, AC_MSG_ERROR([Canna library not found (required for Japanese).]))
	   WITHJAPANESE=true;
         fi, 
	 WITHJAPANESE=false)

AC_ARG_ENABLE([chinese],
	 AC_HELP_STRING([--enable-chinese],[build with support for Chinese PinYin entry (experimental -- default is NO)]),
	 if test $enableval = "no"; then
	   WITHCHINESE=false; 
	 else
	   WITHCHINESE=true;
         fi, 
	 WITHCHINESE=false)

AC_ARG_ENABLE([joystick],
	 AC_HELP_STRING([--enable-joystick],[Build with Linux joystick support (note that other UNIX based operating systems aren't supported here)]),
	 if test $enableval = "no"; then
	   WITHJOYSTICK=false; 
	 else
	   WITHJOYSTICK=true;
         fi, 
	 WITHJOYSTICK=false)


AC_ARG_ENABLE([tilt],
	 AC_HELP_STRING([--enable-tilt],[Build with experimental support for tilt sensor input (experimental -- default is NO)]),
	 if test $enableval = "no"; then
	   WITHTILT=false; 
	 else
	   WITHTILT=true;
         fi, 
	 WITHTILT=false)


AC_ARG_WITH([maemo],
	AC_HELP_STRING([--with-maemo],[build with Maemo support (default is NO)]),
	if test $withval = "yes"; then
	   WITHMAEMO=true;
	   WITHGNOME=false;
	   WITHA11Y=false;
	else
	   WITHMAEMO=false;
        fi,
	WITHMAEMO=false)

AC_ARG_WITH([maemo-fullscreen],
	AC_HELP_STRING([--with-maemo-fullscreen],[build as standalone Maemo fullscreen app (default is NO)]),
	if test $withval = "yes"; then
	   WITHMAEMOFULLSCREEN=true;
	   WITHMAEMO=true;
	   WITHGNOME=false;
	   WITHA11Y=false;
	else
	   WITHMAEMOFULLSCREEN=false;
        fi,
	WITHMAEMOFULLSCREEN=false)


dnl AC_ARG_WITH([darwin],
dnl 	AC_HELP_STRING([--with-darwin],[build with Darwin (Mac OS X) support (default is NO)]),
dnl 	if test $withval = "yes"; then
dnl 	   WITHDARWIN=true;
dnl 	else
dnl 	   WITHDARWIN=false;
dnl 	fi,
dnl 	WITHDARWIN=false)

AC_ARG_WITH([cairo],
	 AC_HELP_STRING([--with-cairo],[build with cairo support (default is YES)]),
	 if test $withval = "no"; then
	   WITHCAIRO=false; 
	 else
	   WITHCAIRO=true;
         fi, 
	 WITHCAIRO=true)

if [[ x"$WITHGTK2" = xtrue ]]
then 
	PKG_CHECK_MODULES(GTK2, gtk+-2.0 >= 2.4.0,[GTK2HERE=true],[GTK2HERE=false]) 
	PKG_CHECK_MODULES(GCONF, gconf-2.0,[GCONF2HERE=true],[GCONF2HERE=false])
	if [[ x$GCONF2HERE = xfalse ]]; then
	   AC_MSG_WARN("GConf was not detected - user preferences will not be stored.")
	fi
fi

if [[ x"$GTK2HERE" = xtrue ]] && [[ x"$WITHGTK2" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
elif [[ x"$GTK2HERE" = xtrue ]] && [[ x"$WITHQTE" != xtrue ]]
then
	BUILDGTK2=true
else 
	BUILDGTK2=false
fi

if [[ x$BUILDGTK2 = xfalse ]] && [[ x"$WITHQTE" != xtrue ]]
then
	echo $WITHGTK2
	AC_ERROR("Unable to find GTK2 or another necessary library. See the previous line for more useful data.")
fi

if [[ x"$WITHQTE" != xtrue ]]
then
dnl test for X libraries
	if test	x$no_x = xyes ; then
	  AC_MSG_ERROR([X development libraries not found])
	else
	  X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
	fi

dnl path to Xtst
	AC_CHECK_LIB(Xtst, XTestFakeKeyEvent, XTST_LIBS=-lXtst)
	if test "x$XTST_LIBS" = x; then
	  save_LIBS="$LIBS"
	  for xtstpath in /usr/X11R6/lib64 /usr/X11R6/lib /usr/openwin/lib $x_libraries; do
	    LIBS="-L$xtstpath -lXtst"
	    case "$host" in
	    *solaris*) XTST_RPATH_FLAGS="-R$xtstpath" ;;
	    esac
	    AC_MSG_CHECKING(for -lXtst in $xtstpath)
	    AC_TRY_LINK([], [XTestFakeKeyEvent()], [
	        AC_MSG_RESULT(yes)
	        XTST_LIBS="$XTST_RPATH_FLAGS -L$xtstpath -lXtst"
	        LIBS="$save_LIBS"
	        break],[AC_MSG_RESULT(no)])
	  done
	fi
	if test "x$XTST_LIBS" = x; then
	  AC_MSG_ERROR(Couldn't find the Xtst library. Check config.log for details)
	else
	  X_LIBS="$X_LIBS $XTST_LIBS"
	  AC_DEFINE(HAVE_XTST, 1, [The XTest extension is present])
	fi

AC_SUBST(X_LIBS)
fi

if [[ x"$DEBUG" = xtrue ]]; then
	AC_DEFINE([DEBUG], 1, [Additional debug checks enabled])
fi

if [[ x"$WITHGNOME" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome, libgnome-2.0 libgnomeui-2.0 gnome-vfs-2.0)
	AC_DEFINE([GNOME_LIBS], 1, [libgnome-2, libgnomeui-2, and gnome-vfs-2 are present])
fi

if [[ x"$WITHSPEECH" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_speech, gnome-speech-1.0 bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0)
	AC_DEFINE([GNOME_SPEECH], 1, [gnome_speech-1 libraries are present])
#	SPEECH_SOURCES='speech.$(OBJEXT)'
fi

if [[ x"$WITHA11Y" = xtrue ]]; then
	PKG_CHECK_MODULES(gnome_a11y, bonobo-activation-2.0 libbonobo-2.0 ORBit-2.0 libgnomeui-2.0 cspi-1.0 atk)
	AC_DEFINE([GNOME_A11Y], 1, [gnome_a11y libraries are present])
fi

if [[ x"$WITHJAPANESE" = xtrue ]]; then
	AC_DEFINE([JAPANESE], 1, [Japanese support enabled])
	JAPANESE_SOURCES='CannaConversionHelper.$(OBJEXT)'
else
	JAPANESE_SOURCES=
fi

AC_SUBST(JAPANESE_SOURCES)

if [[ x"$WITHCHINESE" = xtrue ]]; then
	AC_DEFINE([CHINESE], 1, [Chinese support enabled])
	CHINESE_SOURCES='PinYinConversionHelper.$(OBJEXT) PinyinParser.$(OBJEXT)'

else
	CHINESE_SOURCES=
fi

AC_SUBST(CHINESE_SOURCES)

if [[ x"$WITHJOYSTICK" = xtrue ]]; then
	AC_DEFINE([JOYSTICK], 1, [Linux joystick support enabled])
fi

if [[ x"$WITHTILT" = xtrue ]]; then
	AC_DEFINE([TILT], 1, [Tilt input support enabled])
fi

if [[ x"$WITHGPE" = xtrue ]]; then
	AC_DEFINE([WITH_GPE], 1, [gpe is present])
fi

dnl if [[ x"$WITHDARWIN" = xtrue ]]; then
dnl         AC_DEFINE([WITH_DARWIN], 1, [Targeting Darwin/X11])
dnl fi

if [[ x"$WITHMAEMO" = xtrue ]]; then
      AC_DEFINE([WITH_MAEMO], 1, [Maemo is present])
      dnl Yes, this sucks
      glade_LIBS="/usr/lib/libglade-2.0.a"
      PKG_CHECK_MODULES(hildon, hildon-libs)
      AC_CHECK_LIB(osso, osso_initialize,, AC_MSG_ERROR([Osso library not found.]))
fi			

if [[ x"$WITHMAEMOFULLSCREEN" = xtrue ]]; then
      AC_DEFINE([WITH_MAEMOFULLSCREEN], 1, [Building as fullscreen Maemo app])
fi

if [[ x"$WITHCAIRO" = xtrue ]]; then
	PKG_CHECK_MODULES(cairo, gtk+-2.0 >= 2.8.0)
	AC_DEFINE([WITH_CAIRO], 1, [use cairo (needs Gtk+ >= 2.8.0)])
fi

if [[ x"$BUILDGTK2" = xtrue ]]; then 
	PKG_CHECK_MODULES(glade, libglade-2.0)
	if [[ x"$WITHMAEMO" = xtrue ]]; then
	        dnl Yes, this sucks
		glade_LIBS=`echo $glade_LIBS | sed s/-lglade-2.0//`
		glade_LIBS="$glade_LIBS /usr/lib/libglade-2.0.a"
	fi

	PKG_CHECK_MODULES(gthread, gthread-2.0)


dnl	if [[ x"$WITHMAEMO" = xfalse ]]; then
dnl		PKG_CHECK_MODULES(wnck, libwnck-1.0)
dnl	        AC_DEFINE([HAVE_WNCK], 1, [wnck is present])
dnl	fi
fi

if [[ x"$GCONF2HERE" = xtrue ]]; then
        AM_GCONF_SOURCE_2
        AC_DEFINE([WITH_GCONF], 1, [Use GConf])
fi

AC_SUBST(gnome_speech_LIBS)
AC_SUBST(gnome_speech_CFLAGS)
AC_SUBST([SPEECH_SOURCES])

AC_SUBST(gnome_a11y_LIBS)
AC_SUBST(gnome_a11y_CFLAGS)
AC_SUBST([A11Y_SOURCES])

AC_SUBST(gnome_LIBS)
AC_SUBST(gnome_CFLAGS)

AC_SUBST(glade_LIBS)
AC_SUBST(glade_CFLAGS)

AC_SUBST(gthread_LIBS)
AC_SUBST(gthread_CFLAGS)

AC_SUBST(wnck_LIBS)
AC_SUBST(wnck_CFLAGS)

AC_SUBST(hildon_LIBS)
AC_SUBST(hildon_CFLAGS)

AC_SUBST(GETTEXT_PACKAGE)

AM_CONDITIONAL(DOGTK2, test x$BUILDGTK2 = xtrue)	
AM_CONDITIONAL(DOQTE, test x$WITHQTE = xtrue)
AM_CONDITIONAL(GNOME_SPEECH, test x$WITHSPEECH = xtrue)
AM_CONDITIONAL(GNOME_A11Y, test x$WITHA11Y = xtrue)
AM_CONDITIONAL(WITH_GPE, test x$WITHGPE = xtrue)
AM_CONDITIONAL(WITH_MAEMO, test x$WITHMAEMO = xtrue)
AM_CONDITIONAL(WITH_MAEMOFULLSCREEN, test x$WITHMAEMOFULLSCREEN = xtrue)
AM_CONDITIONAL(JAPANESE, test x$WITHJAPANESE = xtrue)
AM_CONDITIONAL(CHINESE, test x$WITHCHINESE = xtrue)
AM_CONDITIONAL(JOYSITICK, test x$WITHJOYSTICK = xtrue)

AC_SUBST(GTK2_CFLAGS)
AC_SUBST(GTK2_LIBS)

AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)

if [[ x"$WITHGPE" = xtrue ]]; then
	SETTINGS_CFLAGS=" "
	SETTINGS_LIBS="-lgpewidget -lXsettings-client -lXsettings"
else
	SETTINGS_CFLAGS=$GCONF_CFLAGS
	SETTINGS_LIBS=$GCONF_LIBS
fi
AC_SUBST(SETTINGS_CFLAGS)
AC_SUBST(SETTINGS_LIBS)

GTK2BUILD_CFLAGS="$GTK2_CFLAGS $SETTINGS_CFLAGS $gthread_CFLAGS $gnome_speech_CFLAGS $gnome_a11y_CFLAGS $glade_CFLAGS $gnome_CFLAGS $wnck_CFLAGS $hildon_CFLAGS"

dnl Check for GNU ld stolen from libtool.m4 - code reuse would be nice here

AC_CACHE_CHECK([if the linker ($LD) is GNU ld], have_prog_gnu_ld,
[# I'd rather use --version here, but apparently some GNU lds only accept -v.
case `$LD -v 2>&1 </dev/null` in
*GNU* | *'with BFD'*)
have_prog_gnu_ld=yes
;;
*)
have_prog_gnu_ld=no
;;
esac])

if [[ x"$have_prog_gnu_ld" = xyes ]]; then
   ed_flags="-Wl,--export-dynamic,"
else
   ed_flags=""
fi

GTK2BUILD_LIBS="$X_LIBS $GTK2_LIBS $SETTINGS_LIBS $gthread_LIBS $gnome_speech_LIBS $gnome_a11y_LIBS $glade_LIBS $gnome_LIBS $wnck_LIBS $hildon_LIBS $ed_flags"

AC_SUBST(GTK2BUILD_CFLAGS)
AC_SUBST(GTK2BUILD_LIBS)

if [[ x"$WITHGNOME" = xtrue ]]; then
GNOME_DOC_INIT
else
AM_CONDITIONAL(ENABLE_SK, false)
fi

AC_CONFIG_FILES([Data/dasher.desktop.in
		 Data/Makefile
		 Data/training/Makefile
		 Data/alphabets/Makefile
		 Data/glade/Makefile
		 Data/colours/Makefile
		 Data/controllabels/Makefile
		 Data/Help/Makefile
		 Data/Help/Gnome/Makefile
		 Doc/Makefile
		 Doc/user/Makefile
		 Makefile
		 Src/Makefile
		 Src/Common/Makefile
		 Src/DasherCore/Makefile
		 Src/DasherCore/LanguageModelling/Makefile
		 Src/DasherIM/Makefile
		 Src/Gtk2/Makefile
		 Src/Installer/Makefile
		 Src/Win32/Makefile
		 Utils/Makefile
		 po/Makefile.in])

AC_OUTPUT
